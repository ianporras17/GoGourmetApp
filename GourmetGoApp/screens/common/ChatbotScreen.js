import React, { useState } from 'react';
import { StyleSheet, View, ScrollView, TouchableOpacity } from 'react-native';
import { Text, useTheme, Card, Divider, IconButton } from 'react-native-paper';
import { SafeAreaView } from 'react-native-safe-area-context';
import { MaterialCommunityIcons } from '@expo/vector-icons';
import CustomButton from '../../components/CustomButton';

const ChatbotScreen = ({ navigation }) => {
  const theme = useTheme();
  const [currentView, setCurrentView] = useState('menu'); // 'menu' or 'answer'
  const [selectedQuestion, setSelectedQuestion] = useState(null);

  const faqData = {
    1: {
      question: 'Â¿CÃ³mo hago una reservaciÃ³n?',
      answer: 'Para hacer una reservaciÃ³n:\n\n1. Explora las experiencias disponibles en la pantalla principal\n2. Selecciona la experiencia que te interese\n3. Haz clic en "Reservar"\n4. Completa el formulario con tus datos\n5. Selecciona el mÃ©todo de pago\n6. Confirma tu reservaciÃ³n\n\nRecibirÃ¡s un cÃ³digo QR que debes presentar en el evento.'
    },
    2: {
      question: 'Â¿QuÃ© mÃ©todos de pago estÃ¡n permitidos?',
      answer: 'Actualmente aceptamos dos mÃ©todos de pago:\n\nâ€¢ **Pago en el lugar**: Pagas directamente en el evento\nâ€¢ **Transferencia bancaria**: Coordinas el pago previo por transferencia\n\nSi eliges transferencia, recibirÃ¡s los detalles bancarios por correo electrÃ³nico para completar el pago.'
    },
    3: {
      question: 'Â¿Puedo cancelar una experiencia?',
      answer: 'Las polÃ­ticas de cancelaciÃ³n dependen de cada experiencia:\n\nâ€¢ **CancelaciÃ³n gratuita**: Hasta 24 horas antes del evento\nâ€¢ **CancelaciÃ³n con cargo**: Menos de 24 horas (50% del valor)\nâ€¢ **Sin reembolso**: El mismo dÃ­a del evento\n\nPara cancelar, contacta al chef directamente o envÃ­a un correo a soporte.'
    },
    4: {
      question: 'Â¿CÃ³mo califico una experiencia pasada?',
      answer: 'Para calificar una experiencia:\n\n1. Ve a "Mis Reservaciones"\n2. Busca la experiencia en la pestaÃ±a "Pasadas"\n3. Haz clic en el Ã­cono de estrella\n4. Selecciona tu calificaciÃ³n (1-5 estrellas)\n5. Escribe un comentario\n6. Opcionalmente, agrega fotos\n7. EnvÃ­a tu calificaciÃ³n\n\nSolo puedes calificar experiencias a las que hayas asistido.'
    },
    5: {
      question: 'Â¿QuÃ© pasa si no me presento al evento?',
      answer: 'Si no te presentas al evento:\n\nâ€¢ **Sin aviso previo**: Pierdes el 100% del pago\nâ€¢ **Aviso con menos de 24h**: Pierdes el 50% del pago\nâ€¢ **Emergencia mÃ©dica**: Contacta al chef para posibles excepciones\n\nTu reservaciÃ³n se marcarÃ¡ como "No asistiÃ³" y esto puede afectar futuras reservaciones.'
    }
  };

  const handleQuestionSelect = (questionId) => {
    setSelectedQuestion(questionId);
    setCurrentView('answer');
  };

  const handleBackToMenu = () => {
    setCurrentView('menu');
    setSelectedQuestion(null);
  };

  const renderMenu = () => (
    <>
      <View style={styles.botMessageContainer}>
        <View style={styles.botAvatar}>
          <MaterialCommunityIcons name="robot" size={24} color="white" />
        </View>
        <View style={styles.botMessage}>
          <Text style={styles.botText}>Hola ðŸ‘‹ Â¿En quÃ© puedo ayudarte?</Text>
        </View>
      </View>

      <Text style={styles.menuTitle}>Preguntas Frecuentes</Text>
      
      {Object.entries(faqData).map(([id, item]) => (
        <TouchableOpacity
          key={id}
          style={styles.questionButton}
          onPress={() => handleQuestionSelect(parseInt(id))}
        >
          <Card style={styles.questionCard}>
            <Card.Content style={styles.questionContent}>
              <Text style={styles.questionNumber}>[{id}]</Text>
              <Text style={styles.questionText}>{item.question}</Text>
              <MaterialCommunityIcons 
                name="chevron-right" 
                size={20} 
                color={theme.colors.primary} 
              />
            </Card.Content>
          </Card>
        </TouchableOpacity>
      ))}

      <TouchableOpacity
        style={styles.questionButton}
        onPress={() => navigation.goBack()}
      >
        <Card style={[styles.questionCard, styles.backCard]}>
          <Card.Content style={styles.questionContent}>
            <Text style={styles.questionNumber}>[6]</Text>
            <Text style={styles.questionText}>Volver al menÃº principal</Text>
            <MaterialCommunityIcons 
              name="home" 
              size={20} 
              color={theme.colors.primary} 
            />
          </Card.Content>
        </Card>
      </TouchableOpacity>
    </>
  );

  const renderAnswer = () => (
    <>
      <View style={styles.botMessageContainer}>
        <View style={styles.botAvatar}>
          <MaterialCommunityIcons name="robot" size={24} color="white" />
        </View>
        <View style={styles.botMessage}>
          <Text style={styles.botText}>{faqData[selectedQuestion]?.answer}</Text>
        </View>
      </View>

      <View style={styles.actionButtons}>
        <CustomButton
          label="Ver mÃ¡s preguntas"
          type="primary"
          icon="format-list-bulleted"
          onPress={handleBackToMenu}
          style={styles.actionButton}
        />
        <CustomButton
          label="MenÃº principal"
          type="secondary"
          icon="home"
          onPress={() => navigation.goBack()}
          style={styles.actionButton}
        />
      </View>
    </>
  );

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <IconButton
          icon="arrow-left"
          size={24}
          onPress={() => navigation.goBack()}
        />
        <Text style={styles.headerTitle}>Asistente Virtual</Text>
        <View style={{ width: 48 }} />
      </View>
      
      <ScrollView 
        contentContainerStyle={styles.scrollContent}
        showsVerticalScrollIndicator={false}
      >
        {currentView === 'menu' ? renderMenu() : renderAnswer()}
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingVertical: 8,
    backgroundColor: 'white',
    elevation: 2,
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  scrollContent: {
    padding: 16,
    paddingBottom: 32,
  },
  botMessageContainer: {
    flexDirection: 'row',
    marginBottom: 24,
    alignItems: 'flex-start',
  },
  botAvatar: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#FF4081',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  botMessage: {
    flex: 1,
    backgroundColor: 'white',
    padding: 16,
    borderRadius: 16,
    borderTopLeftRadius: 4,
    elevation: 1,
  },
  botText: {
    fontSize: 16,
    lineHeight: 24,
    color: '#333',
  },
  menuTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 16,
    textAlign: 'center',
    color: '#333',
  },
  questionButton: {
    marginBottom: 12,
  },
  questionCard: {
    elevation: 2,
  },
  backCard: {
    backgroundColor: '#f0f0f0',
  },
  questionContent: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 8,
  },
  questionNumber: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#FF4081',
    marginRight: 12,
    minWidth: 30,
  },
  questionText: {
    flex: 1,
    fontSize: 16,
    color: '#333',
  },
  actionButtons: {
    marginTop: 24,
    gap: 12,
  },
  actionButton: {
    marginBottom: 8,
  },
});

export default ChatbotScreen;